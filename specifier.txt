
Native(PackageName)
    Indicates that "this class uses behind-the-scenes C++ support". Unreal expects native classes to contain a C++ implementation in the .EXE. Only native classes are allowed to declare native functions or implement native interfaces. Native classes must always derive from another native class. Native classes create an auto-generated C++ header file with the necessary glue to interact with the script variables and specified functions. By default, the PackageName is the package that the script class resides in. For example, if the class were in the Engine package, the resulting auto-generated header would be called EngineClasses.h. 
NativeReplication
    Indicates that replication of variable values for this class is handled in the C++ implementation. Only valid for native classes. 
DependsOn(ClassName[,ClassName,...])
    Indicates that ClassName is compiled before this class. ClassName must specify a class in the same (or a previous) package. Multiple dependency classes can be specified using a single DependsOn line delimited by commas, or can be specified using a separate DependsOn line for each class. This is important when a class uses a struct or enum declared in another class as the compiler only knows what is in the classes it has already compiled. 
Abstract
    Declares the class as an "abstract base class". This prevents the user from adding actors of this class to the world in UnrealEd or creating instances of this class during the game, because the class isn't meaningful on its own. For example, the Actor base class is abstract, while the Ladder subclass is not abstract -- you can place a Ladder in the world, but you can't place an Actor in the world. This keyword is propagated to intrinsic child classes, but not to script child classes. For example, Actor is abstract and Pawn extends from Actor but is not declared as abstract. The specifier is not inherited so Pawns can be instantiated. 
Deprecated
    Causes all objects of this class to be loaded but not saved. Any placed instances of deprecated actors will generate warnings for level designers when they load a map in the editor. This keyword is propagated to child classes. 
Transient
    Says "objects belonging to this class should never be saved on disk". Only useful in conjunction with certain kinds of native classes which are non-persistent by nature, such as players or windows. This keyword is propagated to child classes; child classes can override this flag using the NonTransient keyword. 
NonTransient
    Negates a Transient keyword inherited from a base class. 
Config(IniName)
    Indicates that this class is allowed to store data in a configuration file (.ini). If there are any configurable variables in the class (declared with the config or globalconfig variable specifiers), this specifier causes those variables to be stored in the specified configuration file inside the ( and ). This flag is propagated to all child classes and cannot be negated, but child classes can change the .ini file by redeclaring the Config keyword and specifying a different file name. The value of IniName is appended to the game name - minus the "Game" part - to specify the name of the .ini file to store data in (for instance, in UDKGame specifying Config(Camera) will cause the class to use the UDKCamera.ini file). The keyword inherit can also be specified as the IniName, which will cause the class to use the same config file as its parent. Some .ini files exist by default, such as:

        Config(Engine): Uses the Engine configuration file, which is the name of your game followed by Engine.ini. For example, UDKGame's engine configuration file is named UDKEngine.ini.
        Config(Editor): Uses the Editor configuration file, which is the name of your game followed by Editor.ini. For example, UDKGame's editor configuration file is named UDKEditor.ini.
        Config(Game): Uses the Game configuration file, which is the name of your game followed by Game.ini. For example, UDKGame's game configuration file is named UDKGame.ini.
        Config(Input): Uses the Input configuration file, which is the name of your game followed by Input.ini. For example, UDKGame's engine configuration file is named UDKInput.ini. 

PerObjectConfig
    Configuration information for this class will be stored per object, where each object has a section in the .ini file named after the object in the format [ObjectName ClassName]. This keyword is propagated to child classes. 
PerObjectLocalized
    Localized data for this class will be defined on a per-object basis, where each object has a section in the localization file named after the object in the format [ObjectName ClassName]. This keyword is propagated to child classes. 
EditInlineNew
    Editor. Indicates that objects of this class can be created from the UnrealEd property window (default behavior is that only references to existing objects may be assigned through the property window). This flag is propagated to all child classes; child classes can override this flag using the NotEditInlineNew keyword. 
NotEditInlineNew
    Editor. Negates a EditInlineNew keyword inherited from a base class. No effect if no parent classes are using EditInlineNew. 
Placeable
    Editor. Indicates that this class can be created in UnrealEd and placed into a level, UI scene, or kismet window (depending on the class type). This flag is propagated to all child classes; child classes can override this flag using the NotPlaceable keyword. 
NotPlaceable
    Editor. Negates a Placeable keyword inherited from a base class. Indicates that this class may not be placed into a level, etc. in UnrealEd. 
HideDropDown
    Editor. Prevents this class from showing up in UnrealEd property window combo boxes. 
HideCategories(Category[,Category,...])
    Editor. Specifies one or more categories that should be hidden in the UnrealEd property window for objects of this class. To hide variables declared with no category, use the name of the class which declares the variable. This keyword is propagated to child classes. 
ShowCategories(Category[,Category,...])
    Editor. Negates a HideCategories keyword inherited from a base class. 
AutoExpandCategories(Category[,Category,...])
    Editor. Specifies one or more categories that should be automatically expanded in the UnrealEd property window for objects of this class. To auto-expand variables declared with no category, use the name of the class which declares the variable. 
CollapseCategories
    Editor. Indicates that properties of this class should not be grouped in categories in UnrealEd property windows. This keyword is propagated to child classes; child classes can override this flag using the DontCollapseCategories keyword. 
DontCollapseCategories
    Editor. Negates a CollapseCatogories keyword inherited from a base class. 
ForceScriptOrder(true/false)
    Editor. Forces property windows displaying an object of this class to use script-defined ordering for properties and categories (if true) or alphabetical order (if false). 
Within ClassName
    Advanced. Indicates that objects of this class cannot exist without an instance of ClassName. In order to create an object of this class, you must specify an instance of ClassName as the Outer object. This keyword must be the first to follow the class declaration itself. 
Inherits(ClassName[,ClassName,...])
    Advanced. Used for multiple inheritance - specifies the additional base classes. Multiple bases can be specified using a single Inherits line delimited by commas, or can be specified using a separate Inherits line for each base class. Only valid for native classes. Multiple inheritance from two UObject-derived classes is not supported. 
Implements(ClassName[,ClassName,...])
    Advanced. Specifies one of more interface classes which this class will implement. Multiple interfaces can be specified using a single Implements line delimited by commas, or can be specified using a separate Implements line for each interface class. Only native classes can implement native interfaces. 
NoExport
    Advanced. Indicates that this class's C++ declaration should not be included in the automatically-generated C++ header file by the script compiler. The C++ class declaration must be defined manually in a separate header file. Only valid for native classes. 
ClassGroup(Groupname[,Groupname,...])
    Indicates that the Editor's Actor Browser should include this class and any subclass of this class within the specified GroupName when Group View is enabled in the Actor Browser. 



config
    This variable will be made configurable. The current value can be saved to the ini file and will be loaded when created. Cannot be given a value in default properties. Implies const. 
globalconfig
    Works just like config except that you can't override it in a subclass. Cannot be given a value in default properties. Implies const. 
localized
    The value of this variable will have a localized value defined. Mostly used for strings. Implies const. Read more about this in the Localization Reference and Unreal Strings. 
const
    Treats the contents of the variable as a constant. In UnrealScript, you can read the value of const variables, but you can't write to them. "Const" is only used for variables which the engine is responsible for updating, and which can't be safely updated from UnrealScript, such as an actor's Location (which can only be set by calling the MoveActor function). 
private
    The variable is private, and may only be accessed by the class's script; no other classes (including subclasses) may access it. 
protected
    The variable can only be accessed from the class and it's subclasses, not from other classes. 
repnotify
    Actors should be notified (via the ReplicatedEvent function) when this value for this property is received via replication. 
deprecated
    Indicates that this variable is going to be removed in the near future, and should no longer be accessible in the editor. Deprecated properties are loaded, but not saved. 
instanced
    Object properties only. When an instance of this class is created, it will be given a unique copy of the object assigned to this variable in defaults. Used for instancing subobjects defined in class default properties. 
databinding
    This property can be manipulated by the data store system. 
editoronly
    This property's value will only be loaded when running UnrealEd or a commandlet. During the game, the value for this property is discarded. 
notforconsole
    This property's value will only be loaded when running on the PC. On consoles, the value for this property is discarded. 

editconst
    Editor. The variable can be seen in UnrealEd but not edited. A variable that is editconst is not implicitly "const". 
editfixedsize
    Editor. Only useful for dynamic arrays. This will prevent the user from changing the length of an array via the UnrealEd property window. 
editinline
    Editor. Allows the user to edit the properties of the object referenced by this variable within UnrealEd's property inspector (only useful for object references, including arrays of object reference). 
editinlineuse
    Editor. In addition to the behavior associated with editinline, adds a "Use" button next to this object reference in the editor 
noclear
    Editor. Prevents this object reference from being set to None from the editor. 
interp
    Editor. Indicates that the value can be driven over time by a Float or Vector Property Track in Matinee. 

input
    Advanced. Makes the variable accessible to Unreal's input system, so that input (such as button presses and joystick movements) can be directly mapped onto it. Only relevent with variables of type "byte" and "float". 
transient
    Advanced. Declares that the variable is for temporary use, and isn't part of the object's persistent state. Transient variables are not saved to disk. Transient variables are initialized to the class's default value for that variable when an object is loaded. 
duplicatetransient
    Advanced. Indicates that the variable's value should be reset to the class default value when creating a binary duplicate of an object (via StaticDuplicateObject). 
noimport
    Advanced. Indicates that this variable should be skipped when importing T3D text. In other words, the value of this variable will not be transferred to new object instances when importing or copy/pasting objects. 
native
    Advanced. Declares that the variable is loaded and saved by C++ code, rather than by UnrealScript. 
export
    Advanced. Only useful for object properties (or arrays of objects). Indicates that the object assigned to this property should be exported in its entirety as a subobject block when the object is copied (for copy/paste) or exported to T3D, as opposed to just outputting the object reference itself. 
noexport
    Advanced. Only useful for native classes. This variable should not be included in the auto-generated class declaration. 
nontransactional
    Advanced. Indicates that changes to this variable value will not be included in the editor's undo/redo history. 
pointer{type}
    Advanced. This variable is a pointer to type. (The type is optional). Note the syntax is: pointer varname{type}. 
init
    Advanced. This property should be exported to the header file as an FString or TArray, rather than an FStringNoInit or TArrayNoInit. Only applicable to strings and dynamic arrays declared in native classes. 'Init' properties should not be given default values, as the default value will be cleared when the object is created. (See Unreal Strings and Native Strings) 
repretry
    Advanced; struct properties only. Retry replication of this property if it fails to be fully sent (e.g. object references not yet available to serialize over the network). For simple references this is the default, but for structs this is often undesirable due to the bandwidth cost, so it is disabled unless this flag is specified. 
allowabstract
    Advanced; class references only. Allows abstract classes to be assigned to this variable within the editor. 

out
    This specifier is only valid for function parameters. See Function Parameter Specifiers for more details. 
coerce
    This specifier is only valid for function parameters. See Function Parameter Specifiers for more details. 
optional
    This specifier is only valid for function parameters. See Function Parameter Specifiers for more details. 

skip
    This specifier is only valid for operator function parameters. It is only used for binary logical operators like && and ||. Tells the compiler to inject a little piece of code into the stream so that the second argument can be skipped over (not evaluated) if the outcome of the logical operation can be determined completely from the first argument.

    This assures C stlye behavior in expressions like:

       if( ++a==10 && ++b==10 )
       

    Here, the ++b is skipped if the first expression fails. 





atomic
    Indicates that this struct should always be serialized as a single unit; if any property in the struct differs from its defaults, then all elements of the struct will be serialized. 
atomicwhencooked
    applies the 'atomic' flag only when working with cooked package data. 
immutable
    Indicates that this struct uses binary serialization (reduces disk space and improves serialization performance); it is unsafe to add/remove members from this struct without incrementing the package version. 
immutablewhencooked
    applies the 'immutable' flag only when working with cooked package data. 
strictconfig
    Indicates that when the struct property has 'config/globalconfig', only properties marked config/globalconfig within this struct can be read from .ini (without this flag, all properties in the struct are configurable if the property is) 



Out
    When you normally call a function, UnrealScript makes a local copy of the parameters you pass the function. If the function modifies some of the parameters, those don't have any effect on the variables you passed in. For example, the following program:

       function int DoSomething( int x )
       {
          x = x * 2;
          return x;
       }

       function int DoSomethingElse()
       {
          local int a, b;

          a = 2;
          log( "The value of a is " $ a );

          b = DoSomething( a );
          log( "The value of a is " $ a );
          log( "The value of b is " $ b );
       }
       

    Produces the following output when DoSomethingElse is called:

       The value of a is 2
       The value of a is 2
       The value of b is 4
       

    In other words, the function DoSomething was futzing with a local copy of the variable a which was passed to it, and it was not affecting the real variable a.

    The out specifier lets you tell a function that it should actually modify the variable that is passed to it, rather than making a local copy. This is useful, for example, if you have a function that needs to return several values to the caller. You can juse have the caller pass several variables to the function which are out values. For example:

       // Compute the minimum and maximum components of a vector.
       function VectorRange( vector V, out float Min, out float Max )
       {
       	   // Compute the minimum value
       	   if ( V.X<V.Y && V.X<V.Z ) Min = V.X;
       	   else if( V.Y<V.Z ) Min = V.Y;
       	   else Min = V.Z;

       	   // Compute the maximum value.
       	   if ( V.X>V.Y && V.X>V.Z ) Max = V.X;
       	   else if( V.Y>V.Z ) Max = V.Y;
    	   else Max = V.Z;
       }
       

    Without the out keyword, it would be painful to try to write functions that had to return more than one value. Out parameters are passed by reference so modifying the parameter's value in the function will immediately affect the original. This can also be used as an optimization for large values, similiarly to C++, by specifying "const out". 
Optional
    With the optional keyword, you can make certain function parameters optional, as a convenience to the caller. For UnrealScript functions, optional parameters which the caller doesn't specify are set to the default value given in the function declaration, or zero (e.g. 0, false, "", none) if no value was specified in the function signature. For native functions, the default values of optional parameters depends on the function. For example, the Spawn function takes an optional location and rotation, which default to the spawning actor's location and rotation. The default value of optional arguments can be specified by adding = value. For example function myFunc(optional int x = -1). 
Coerce
    The coerce keyword forces the caller's parameters to be converted to the specified type (even if UnrealScript normally would not perform the conversion automatically). This is useful for functions that deal with strings, so that the parameters are automatically converted to strings for you. (See Unreal Strings) 



Static
    A static function acts like a C global function, in that it can be called without having a reference to an object of the class. Static functions can call other static functions, and can access the default values of variables. Static functions cannot call non-static functions and they cannot access instance variables (since they are not executed with respect to an instance of an object). Unlike languages like C++, static functions are virtual and can be overridden in child classes. This is useful in cases where you wish to call a static function in a variable class (a class not known at compile time, but referred to by a variable or an expression). 
Singular
    The singular keyword, which appears immediately before a function declaration, prevents a function from calling itself recursively. The rule is this: If a certain actor is already in the middle of a singular function, any subsequent calls to singular functions will be skipped over. This is useful in avoiding infinite-recursive bugs in some cases. For example, if you try to move an actor inside of your Bump function, there is a good chance that the actor will bump into another actor during its move, resulting in another call to the Bump function, and so on. You should be very careful in avoiding such behavior, but if you can't write code with complete confidence that you're avoiding such potential recursive situations, use the singular keyword. Note that this is not limited just to the particular function that is flagged singular -- all singular functions within a single object will not execute if you are currently in a singular function that is executing. 
Native
    You can declare UnrealScript functions as native, which means that the function is callable from UnrealScript, but is actually implemented (elsewhere) in C++. For example, the Actor class contains a lot of native function definitions, such as:

       native(266) final function bool Move( vector Delta );
       

    The number inside the parenthesis after the native keyword corresponds to the number of the function as it was declared in C++ (using the AUTOREGISTER_NATIVE macro), and is only required for operator functions. The native function is expected to reside in the DLL named identically to the package of the class containing the UnrealScript definition. 
NoExport
    Only used for native functions. Declares that the C++ function declaration for this native function should not be exported. Only the declaration for the glue version of the function will be exported. 
Exec
    Indicates that this function can be executed by typing the name of the function into the console. Only valid in certain classes. 
Latent
    Declares that a native function is latent, meaning that it can only be called from state code, and it may return after some game-time has passed. 
Iterator
    Declares that a native function is an iterator, which can be used to loop through a list of actors using the foreach command. 
Simulated
    Declares that a function may execute on the client-side when an actor is either a simulated proxy or an autonomous proxy. All native functions are automatically simulated as well. (Note: if you override a virtual native with a non-native function, the non-native override will NOT be simulated unless this keyword is specified) 
Server
    Declares that a function should be sent to the server for execution instead of running on the local client. 
Client
    Declares that a function should be sent to the owning client for execution instead of running on the server. This flag also implicitly sets the simulated flag for the function. 
Reliable
    Declares that a replicated function (marked with either server or client) should be reliably sent, meaning it will always eventually reach the other end in order relative to other replication on that Actor. 
Unreliable
    Declares that a replicated function (marked with either server or client) should be unreliably sent, meaning that it is not guaranteed to reach the other end in any particular order or at all and may be skipped completely if there is insufficient bandwidth available. 
Private, Protected
    These keywords have the same meaning as the corresponding variable keywords. 
Operator, PreOperator, PostOperator
    These keywords are for declaring a special kind of function called an operator (equivalent to C++ operators). This is how UnrealScript knows about all of the built-in operators like "+", "-", "==", and "||". I'm not going into detail on how operators work in this document, but the concept of operators is similar to C++, and you can declare new operator functions and keywords as UnrealScript functions or native functions. 
Event
    Used in place of the function keyword when declaring a function that can be executed from native C++ engine code. See Events for more information. 
Const
    Can only be used with native declared function and this specifier is added after the function declaration. This specifier will determine whether this function should be exported as 'const' in the generated header. Example usage:

       native function int doSomething(string myData) const;
       

